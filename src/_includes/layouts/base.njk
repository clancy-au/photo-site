<!doctype html><html lang="en"><head>
<meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<title>{{ title or site.title or "Site" }}</title>
<link rel="stylesheet" href="/assets/css/styles.css">
</head><body class="dark">
	<header class="site-header">
		<h1><a class="brand" href="/">{{ site.title or "Clancy Malcolm Photography" }}</a></h1>
		<nav class="site-nav">
			{% for item in site.nav %}
			  <a href="{{ item.href }}">{{ item.label }}</a>{% if not loop.last %} <span aria-hidden="true" class="sep">|</span> {% endif %}
			{% endfor %}
		</nav>
	</header>
<main>{{ content | safe }}</main>

<!-- Lightbox Modal -->
<div id="lightbox" class="lightbox" style="display: none;" role="dialog" aria-modal="true" aria-labelledby="lightbox-caption">
  <div class="lightbox-backdrop"></div>
  <div class="lightbox-content">
    <button class="lightbox-close" aria-label="Close lightbox">&times;</button>
    <img class="lightbox-image" src="" alt="">
    <div class="lightbox-info">
      <div class="lightbox-caption" id="lightbox-caption"></div>
      <div class="lightbox-exif"></div>
    </div>
  </div>
  <!-- Emergency close button for mobile -->
  <button class="lightbox-emergency-close" aria-label="Emergency close" style="position: fixed; top: 20px; left: 20px; z-index: 1003; background: rgba(255,0,0,0.9); color: white; border: none; border-radius: 50%; width: 50px; height: 50px; font-size: 24px; font-weight: bold; box-shadow: 0 4px 12px rgba(0,0,0,0.5);">&times;</button>
</div>

<footer class="site-footer"><p>© {{ "now" | date("yyyy") }} {{ site.author or "Clancy Malcolm" }}</p></footer>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const lightbox = document.getElementById('lightbox');
  const lightboxImage = lightbox.querySelector('.lightbox-image');
  const lightboxCaption = lightbox.querySelector('.lightbox-caption');
  const lightboxExif = lightbox.querySelector('.lightbox-exif');
  const lightboxClose = lightbox.querySelector('.lightbox-close');
  const lightboxBackdrop = lightbox.querySelector('.lightbox-backdrop');
  const emergencyClose = lightbox.querySelector('.lightbox-emergency-close');
  
  let isLightboxOpen = false;
  
  // Open lightbox - handle both click and touch events
  function handleTriggerEvent(e) {
    if (e.target.closest('.lightbox-trigger')) {
      console.log('Lightbox trigger activated', e.type); // Debug log
      e.preventDefault();
      e.stopPropagation();
      
      if (isLightboxOpen) return;
      
      const trigger = e.target.closest('.lightbox-trigger');
      
      const src = trigger.dataset.src;
      const caption = trigger.dataset.caption;
      const camera = trigger.dataset.camera;
      const lens = trigger.dataset.lens;
      const focalLength = trigger.dataset.focalLength;
      const aperture = trigger.dataset.aperture;
      const shutterSpeed = trigger.dataset.shutterSpeed;
      const iso = trigger.dataset.iso;
      const dateTime = trigger.dataset.dateTime;
      
      lightboxImage.src = src;
      lightboxImage.alt = caption;
      lightboxCaption.textContent = caption;
      
      // Build EXIF info
      const exifItems = [];
      if (camera) exifItems.push(camera);
      if (lens) exifItems.push(lens);
      if (focalLength) exifItems.push(focalLength);
      if (aperture) exifItems.push(aperture);
      if (shutterSpeed) exifItems.push(shutterSpeed);
      if (iso) exifItems.push(`ISO ${iso}`);
      
      let exifHTML = '';
      if (exifItems.length > 0) {
        exifHTML += '<div class="exif-data">' + exifItems.join(' • ') + '</div>';
      }
      if (dateTime) {
        exifHTML += '<div class="exif-date">' + dateTime + '</div>';
      }
      
      lightboxExif.innerHTML = exifHTML;
      
      // Open lightbox
      console.log('Opening lightbox'); // Debug log
      console.log('Viewport dimensions:', window.innerWidth, 'x', window.innerHeight);
      console.log('Image src:', src);
      isLightboxOpen = true;
      lightbox.style.display = 'flex';
      document.body.classList.add('lightbox-open');
      document.body.style.overflow = 'hidden';
      document.body.style.position = 'fixed';
      document.body.style.width = '100%';
      
      // Focus management for accessibility
      setTimeout(() => {
        lightboxClose.focus();
        console.log('Lightbox positioned, image loaded');
        console.log('Lightbox display:', lightbox.style.display);
        console.log('Image dimensions:', lightboxImage.naturalWidth, 'x', lightboxImage.naturalHeight);
      }, 100);
    }
  }
  
  // Add both click and touchstart event listeners
  document.addEventListener('click', handleTriggerEvent);
  document.addEventListener('touchstart', handleTriggerEvent, { passive: false });
  
  // Close lightbox
  function closeLightbox() {
    console.log('Closing lightbox'); // Debug log
    if (!isLightboxOpen) return;
    
    isLightboxOpen = false;
    lightbox.style.display = 'none';
    document.body.classList.remove('lightbox-open');
    document.body.style.overflow = '';
    document.body.style.position = '';
    document.body.style.width = '';
  }
  
  // Close button and backdrop handlers
  lightboxClose.addEventListener('click', function(e) {
    e.preventDefault();
    e.stopPropagation();
    closeLightbox();
  });
  
  lightboxClose.addEventListener('touchstart', function(e) {
    e.preventDefault();
    e.stopPropagation();
    closeLightbox();
  }, { passive: false });
  
  // Emergency close button
  emergencyClose.addEventListener('click', function(e) {
    e.preventDefault();
    e.stopPropagation();
    closeLightbox();
  });
  
  emergencyClose.addEventListener('touchstart', function(e) {
    e.preventDefault();
    e.stopPropagation();
    closeLightbox();
  }, { passive: false });
  
  lightboxBackdrop.addEventListener('click', function(e) {
    if (e.target === lightboxBackdrop) {
      closeLightbox();
    }
  });
  
  lightboxBackdrop.addEventListener('touchstart', function(e) {
    if (e.target === lightboxBackdrop) {
      e.preventDefault();
      closeLightbox();
    }
  }, { passive: false });
  
  // Close on Escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && isLightboxOpen) {
      closeLightbox();
    }
  });
  
  // Prevent scroll on lightbox content
  lightbox.addEventListener('touchmove', function(e) {
    if (isLightboxOpen) {
      e.preventDefault();
    }
  }, { passive: false });
});
</script>

</body></html>
